import os
import streamlit as st
from groq import Groq
from supabase import create_client, Client
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from dotenv import load_dotenv


load_dotenv()
 
# --- Load environment variables ---
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_KEY")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
 
# --- Initialize clients ---
if not SUPABASE_URL or not SUPABASE_KEY:
    st.error("Supabase credentials are missing. Please set them in environment variables.")
    st.stop()
 
if not GROQ_API_KEY:
    st.error("Groq API key missing. Add GROQ_API_KEY in environment variables.")
    st.stop()
 
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
groq_client = Groq(api_key=GROQ_API_KEY)
 
# --- Verify embeddings table exists ---
def check_table_exists():
    try:
        response = supabase.table("embeddings").select("id").limit(1).execute()
        return True
    except Exception as e:
        st.error("‚ùå 'embeddings' table not found in Supabase.")
        st.info(
            "Please run this SQL in your Supabase SQL Editor before continuing:\n\n"
            """
            CREATE TABLE IF NOT EXISTS embeddings (
                id bigint generated by default as identity primary key,
                text text,
                embedding float8[],
                created_at timestamp default now()
            );
            """
        )
        return False
 
if not check_table_exists():
    st.stop()
 
# --- Groq Embedding function ---
def get_groq_embedding(text: str):
    """
    Uses Groq API to get embedding for given text.
    """
    response = groq_client.embeddings.create(
        model="text-embedding-3-small",
        input=text
    )
    return response.data[0].embedding
 
# --- Store embedding in Supabase ---
def store_embedding(text: str):
    embedding = get_groq_embedding(text)
    data = {
        "text": text,
        "embedding": embedding
    }
    supabase.table("embeddings").insert(data).execute()
    return embedding
 
# --- Retrieve most similar text ---
def search_similar(query: str, top_k=3):
    query_emb = get_groq_embedding(query)
    res = supabase.table("embeddings").select("*").execute()
 
    if not res.data:
        return "No embeddings found in database."
 
    texts = [r["text"] for r in res.data]
    embeddings = [np.array(r["embedding"]) for r in res.data]
 
    sims = cosine_similarity([query_emb], embeddings)[0]
    top_indices = np.argsort(sims)[::-1][:top_k]
    best_match = texts[top_indices[0]]
 
    return best_match
 
# --- Groq LLM for chat completion ---
def groq_chat(prompt: str):
    response = groq_client.chat.completions.create(
        messages=[{"role": "user", "content": prompt}],
        model="llama3-70b-8192",
        temperature=0.7
    )
    return response.choices[0].message.content.strip()
 
# --- Streamlit UI ---
st.title("üí¨ Groq + Supabase + Streamlit Chat with Embeddings")
st.write("Enter a text to store as embedding, or query to find similar text.")
 
mode = st.radio("Choose mode:", ["Add Embedding", "Ask Query"])
 
user_input = st.text_area("Enter your text/query:")
 
if st.button("Submit"):
    if not user_input.strip():
        st.warning("Please enter text first.")
    else:
        if mode == "Add Embedding":
            store_embedding(user_input)
            st.success("‚úÖ Embedding added successfully!")
        elif mode == "Ask Query":
            best_match = search_similar(user_input)
            st.info(f"üß† Most similar text found: **{best_match}**")
 
            # Generate Groq response
            full_prompt = f"Based on this text: {best_match}\nAnswer the query: {user_input}"
            reply = groq_chat(full_prompt)
            st.subheader("üí° Groq Response:")
            st.write(reply)
 
# --- Optional: View stored embeddings ---
st.divider()
if st.checkbox("View stored embeddings"):
    result = supabase.table("embeddings").select("id, text, created_at").execute()
    if result.data:
        st.table(result.data)
    else:
        st.write("No embeddings stored yet.")
 
 